import asyncio
import time
import logging
from asyncio import Semaphore
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏
from parser import get_all_bulletin_links
from save_to_database import process_spimex_bulletins

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
DB_CONCURRENCY_LIMIT = 10
db_semaphore = Semaphore(DB_CONCURRENCY_LIMIT)


async def async_main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    start_time = time.time()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞

    logger.info("üü¢ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä Spimex")

    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—é–ª–ª–µ—Ç–µ–Ω–µ–π
    logger.info("üîç –ò—â–µ–º –±—é–ª–ª–µ—Ç–µ–Ω–∏ –Ω–∞ —Å–∞–π—Ç–µ Spimex...")
    bulletin_list = await get_all_bulletin_links()
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(bulletin_list)} –±—é–ª–ª–µ—Ç–µ–Ω–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—é–ª–ª–µ—Ç–µ–Ω–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±—é–ª–ª–µ—Ç–µ–Ω–µ–π...")
    async with db_semaphore:  # –û–∂–∏–¥–∞–µ—Ç, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∂–¥–æ–≥–æ –±—é–ª–ª–µ—Ç–µ–Ω—è
            tasks = [process_spimex_bulletins(bulletin) for bulletin in bulletin_list]
            await asyncio.gather(*tasks)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—é–ª–ª–µ—Ç–µ–Ω—è: {e}")
            raise

    # –í—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    duration = time.time() - start_time
    logger.info(f"‚úÖ –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")



if __name__ == "__main__":
    try:
        asyncio.run(async_main())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")